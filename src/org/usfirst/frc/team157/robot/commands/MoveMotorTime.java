// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team157.robot.commands;

import org.usfirst.frc.team157.robot.Robot;
import org.usfirst.frc.team157.robot.RobotMap;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class MoveMotorTime extends Command
{
	
	private double voltage = 5;
	private double driveTime = 3;
	private double stopTime;
	
	public MoveMotorTime()
	{
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);
		
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.motorSubsystem);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}
	
	// Called once after isFinished returns true
	@Override
	protected void end()
	{
		System.out.println("DONE");
		if (RobotMap.useCAN)
		{
			Robot.motorSubsystem.setCANJagVoltage(0);
		}
		else
		{
			Robot.motorSubsystem.setPWMJagSpeed(0);
		}
	}
	
	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute()
	{
		if (RobotMap.useCAN)
		{
			Robot.motorSubsystem.setCANJagVoltage(voltage);
		}
		else
		{
			Robot.motorSubsystem.setPWMJagSpeed(1);
		}
	}
	
	// Called just before this Command runs the first time
	@Override
	protected void initialize()
	{
		stopTime = Timer.getFPGATimestamp() + driveTime;
	}
	
	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted()
	{
	}
	
	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished()
	{
		return Timer.getFPGATimestamp() > stopTime;
	}
}
